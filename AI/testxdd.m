function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 08-Nov-2022 10:10:37.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx21 matrix, input #1
% and returns:
%   y = Qx5 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.2805;0.452916666666667;0.2805;0.452916666666667;0.47488;0.43225;0.1265;0.455436615934269;0.216197243913529;0.488859153983567;0.370577538712667;0.419915571071155;0.419915571071155;0.419915571071155;0.464478955136886;0.01698;0.333333333333333;-0.133333333333333;0.216666666666667;0.333333333333333;0.477777777777778];
x1_step1.gain = [5.61272217025257;16.6975881261595;5.61272217025257;16.6975881261595;11.5633672525439;16.7014613778706;8.69565217391304;5.23598775598299;7.34875474523928;23.7101332346399;7.7417966752017;9.56938106576047;9.56938106576047;9.56938106576047;12.1627461473132;4.47087226717933;15;1.84615384615385;1.84615384615385;2.7906976744186;32.7272727272728];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.6935295205088971571;-1.1021433184788298476;0.76052215275697554464;0.48213036279559684516;-0.35107356119806470973;-1.1429433750852138196;-0.63605276461921977926;0.73400315701589757822;-1.1836805113792443489;-1.2890813196177186573];
IW1_1 = [-0.095169582620875409207 -0.44418529091619179949 -0.91019128735406595876 0.41648274220591835482 -0.5049609616491386177 0.81333817256470430923 -0.60458429941253855056 -0.1093174682705818912 -0.24386050299796926955 -0.9888808915887549178 -0.15644943531600882802 0.7239394573403741262 0.15766728798931284317 -0.49520696913707196174 0.18503807413436507145 0.50942602205779330404 0.73693753623952806819 0.62554567951467276998 0.17656812228818491439 0.94344800587524169089 -0.13287837560995641173;0.91606509326583296371 0.37098126776356427081 1.1858489294553713478 0.25339505226287933892 -0.97737178572306160351 -0.19093709792035684636 -0.89720502319490103016 -0.68533845230409162763 -0.50593238952388353002 1.1288637514507593451 0.16322345936930848787 -0.73030347489943192585 0.29415169851315930982 -0.42991783782330145192 -0.33381916934556649101 -0.68393798157795981929 0.44820423671510850605 -0.73074699044755797583 -0.12356937100450968159 0.46618908958403498799 -0.29520689143510059349;-0.15906545886765921516 0.34985295015503814486 0.2165563678896396671 0.29822703691408741777 0.45067804216887313862 0.16397251043218002975 0.29005883697579065705 0.067974936687956677428 -0.16163062000464467616 -0.016554799139051175338 -0.67265352163302583044 0.26347793178656092605 0.37930824861139178505 0.74953018791639136609 -0.11316366222670050379 -0.35791352060787257061 -0.87552946424725941466 0.72698030277815484101 -0.48501804070542581249 0.77770261109714333703 -0.27308579194726134709;0.38517127477488499743 -1.4060723060795627948 -0.037540239386598985016 0.72100135622784666811 -0.29640070777029797755 0.14105799512681777008 0.19361538039007208933 1.0974667426675870363 -0.60364088146853567274 0.32416371191338216873 0.47090051674194965958 -0.3077293206996525865 0.41220553263634529539 0.48625836653450660307 -0.81330333860019743408 -0.44175308472074875654 -0.20434334251552344064 0.043538737246048786478 -0.85286027071213166284 -0.82308288130722329079 0.80566473815821149085;0.10642832651917080722 -0.20193765461992091437 -0.43315326737672921187 0.69429957915090656506 -0.20915777481112485248 0.43466463607810335024 -0.017354026822242341749 -0.23151898426328021419 1.226301630699829559 -0.52828795912282200398 -1.082421511539755965 -0.19691515464108541589 0.19368135158061736134 0.17043282198835585373 0.87347094360462684826 0.39940454634053246252 0.33465802281750051117 -1.7134914956561704269 -1.4557837644069802074 -0.087762892479614135199 -0.52688743391403503047;-0.37069566891896760241 0.38631974200611068904 0.13979265451663494546 0.34478268688608654235 -0.37236215650707565894 -0.50909846497435640167 -0.2039168069506228087 -0.55163432403456369446 0.56556389645961702151 0.61358799024366195152 -0.24870883743294680546 -0.34095171375641430966 0.055245881228917798067 -0.41888510082474500473 0.18617443545564107965 -0.36075228560383687526 0.86413252164991072313 -0.46550601170562772024 0.34996636717472401346 0.30590841218788816791 0.63763700708385007143;-0.63828444125421168742 -0.52175043465801995701 0.51857067506489529229 0.86166047500244746793 -0.48853302639580764577 -0.61299729646373768421 0.13853994041143546934 -0.1510463869756468458 -0.34821512206484322993 -0.053780667879092788897 0.063740485355338660778 -0.42079522307918876267 -0.065528160816420197299 1.4293715323712081755 0.13037693568338309946 -0.35833879210823460504 -0.62390470906753270341 0.14007577345786254019 0.052949360593860184121 -0.51127093726753947145 -0.97397099726685099075;0.8766428967774869685 0.10814674619849060089 0.63397054595197588345 1.2286489261893789315 -0.39064358893576200948 0.18390520646615568512 0.38768181566218040679 0.29009263495530063226 -1.4885940633369427744 0.57961903541547799001 0.025236682710556908316 0.15500435277950957991 -1.0724344501266636076 0.59204786188426261617 -0.11703997927479367624 -1.0549235055296917185 0.22651816884218767267 0.76058729029195248916 -1.2180012507937116872 0.79561243620046762093 0.8973391402131314365;-0.94668065468898365822 0.021555216109246558287 -0.78010897568527681756 0.89494975746334493039 0.30649828004206564058 0.32975175537155915206 0.30405717218112959799 -0.36033871470693196182 0.40212161128271983745 -0.03402542243174520864 0.68660880114701716703 -0.11989570095762563939 -0.5292870239635576457 0.55381469306165032052 0.59581591910703091131 0.30863869786458403288 0.024660075603290726454 -0.78338167873313890865 0.17404861362382237355 -1.7198869298227104085 1.1621344686466892338;-0.40439976766578400458 0.59841852354054958507 -0.70586297385335727839 0.87866341893999200252 0.0523647058165782886 0.20266440809946159596 -0.73055797868039296095 0.36313852102891591711 0.88904420105762749227 1.1010225827941393373 0.58344567380476031193 0.70421693501234727819 0.36136313825754073914 0.28025218208474700354 -0.032891145792776091406 -0.33655642407144270578 0.4792289489776812017 0.43485050578468642524 0.13556074738185699968 0.15570008768024898305 0.43569677763477798749];

% Layer 2
b2 = [-0.88869419655741133113;-0.082979410774703069031;-0.0016945281045968412208;-0.83171472494187226321;-0.36890543235378892017];
LW2_1 = [0.5585198841853410423 1.1165709284097340426 0.64186427232369680507 0.034991371256229412967 0.042944627512292686544 -0.91980618420435311666 0.1673282809726420739 -0.0028632143689646290252 0.1254621983534704166 0.086096837336079257152;-1.065100300495872121 1.0201153668276017328 -0.67415696497159949274 1.5320610980820332792 1.7644745402228723119 -0.1654893265098974775 -0.23260269112544870729 0.52207971898924776522 0.76960494209657648312 -1.369002292510962393;1.0625243225612486242 -1.0051847891850724803 0.68404891779130327922 -1.5324737980188138931 -1.7614045881852584685 0.070161074025846786872 0.2246879095147850669 -0.52254031292541980314 -0.76156305261439216636 1.358742783279560884;-0.28210679732896803973 0.50414951363392779271 1.2724672513818515718 0.0073522838538961268057 -0.076380957357086887161 -0.72473063102113222111 -1.217147632426655024 0.059780922507371242469 0.18352664597386894596 0.31409734031533564913;0.33856685908200362389 0.48427920030512433547 -0.56069346365691974388 0.078995456258291296692 0.12609479520201558045 -0.64759275910318492286 0.073374782882940678408 0.065213757278025336062 0.21227347419221914704 -0.3107285491809491651];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [15;1.84615384615385;1.84615384615385;2.7906976744186;30];
y1_step1.xoffset = [0.333333333333333;-0.133333333333333;0.216666666666667;0.333333333333333;0.477777777777778];

% ===== SIMULATION ========
out = "/****** NN DATA ********/" + newline;
out = out + "const int NNil = " + length(x1_step1.xoffset) + ";" + newline;
out = out + "const int NNol = " + length(y1_step1.xoffset) + ";" + newline;
out = out + "const int NNl1l = " + length(IW1_1(:, 1)) + ";" + newline;
out = out + "float NNinput[" + length(x1_step1.xoffset) + "];" + newline;
out = out + "float NNoutput[" + length(y1_step1.xoffset) + "];" + newline;

out = out + "float x1_step1_xoffset[" + length(x1_step1.xoffset) + "] = {";
first = true;
for i=1:length(x1_step1.xoffset)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",x1_step1.xoffset(i));
end
out = out + "};" + newline;

out = out + "float x1_step1_gain[" + length(x1_step1.gain) + "] = {";
first = true;
for i=1:length(x1_step1.gain)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",x1_step1.gain(i));
end
out = out + "};" + newline;

out = out + "float x1_step1_ymin = " + x1_step1.ymin + ";" + newline;

out = out + "float b1[" + length(b1) + "] = {";
first = true;
for i=1:length(b1)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",b1(i));
end
out = out + "};" + newline;

out = out + "float IW1_1[" + length(IW1_1(:, 1)) + "][" + length(x1_step1.gain) + "] = {";
first = true;

for i=1:length(IW1_1(:, 1))
    if first
        first = false;
    else
        out = out + ",";
    end
    firstx = true;
    out = out + "{";
    for k=1:length(IW1_1(1, :))
        if firstx
            firstx = false;
        else
            out = out + ",";
        end
        out = out + sprintf("%.8f",IW1_1(i, k));
    end
    out = out + "}";
end
out = out + "};" + newline;

out = out + "float b2[" + length(b2) + "] = {";
first = true;
for i=1:length(b2)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",b2(i));
end
out = out + "};" + newline;

out = out + "float LW2_1[" + length(y1_step1.gain) + "][" + length(b1) + "] = {";
first = true;
for i=1:length(LW2_1(:, 1))
    if first
        first = false;
    else
        out = out + ",";
    end
    firstx = true;
    out = out + "{";
    for k=1:length(LW2_1(1, :))
        if firstx
            firstx = false;
        else
            out = out + ",";
        end
        out = out + sprintf("%.8f",LW2_1(i, k));
    end
    out = out + "}";
end
out = out + "};" + newline;

out = out + "float y1_step1_ymin = " + y1_step1.ymin + ";" + newline;

out = out + "float y1_step1_gain[" + length(y1_step1.gain) + "] = {";
first = true;
for i=1:length(y1_step1.gain)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",y1_step1.gain(i));
end
out = out + "};" + newline;

out = out + "float y1_step1_xoffset[" + length(y1_step1.xoffset) + "] = {";
first = true;
for i=1:length(y1_step1.xoffset)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",y1_step1.xoffset(i));
end
out = out + "};" + newline;

out = out + "/****** END OF NN DATA ******/";

disp(out);

fid = fopen('nn.h','wt');
fprintf(fid, out);
fclose(fid);

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
