clc;
disp(myNeuralNetworkFunction([0.46,0.52,0.45,0.52,0.6,0.45,0.37,0.59,0.46,0.36,0.51,0.95,0.56,0.52,0.97,0.55,0.08,0.07,0.07,0.13,0.07,0.14,0.44,0.3,0.76,0.59,0.48]));
xd = "";
for i=1:length(inputs(1, :))
xd = xd + inputs(1, i) + ",";
end
xd;
function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 07-Nov-2022 16:57:13.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx27 matrix, input #1
% and returns:
%   y = Qx5 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.28;0.44;0.28;0.44;0.41;0.37;0.06;0.41;0.37;0.06;0.01;0;0.45;0.01;0;0.45;0;0;0;0;0;0;0.44;0.21;0.27;0.38;0.34];
x1_step1.gain = [4.65116279069767;14.2857142857143;4.65116279069767;14.2857142857143;5.71428571428571;5.55555555555556;4.8780487804878;5.71428571428571;5.55555555555556;4.8780487804878;2.04081632653061;2;14.2857142857143;2.04081632653061;2;14.2857142857143;2;2;2;2;2;3.7037037037037;40;3.44827586206897;3.50877192982456;6.45161290322581;8.33333333333334];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.770105706785794597;-1.4837452513750561955;1.3763464767454798299;-0.78487734561083666307;0.61025455118686999789;0.15093695454691227753;-0.12690997424500793933;0.016567172409188951621;0.29842946710978968117;0.26561595718471486816;-0.54268902116780382006;-0.75951558955568299059;-1.0008179081598360671;-1.2282607486046885903;1.5904230073066991658];
IW1_1 = [0.088174750881438848649 -0.12977666654449565575 -0.35083701124923361014 0.28899132425196194518 -0.2303892407716549573 0.54635301533699420773 -0.29357338790047959876 0.17828273313160086788 -0.2110810035591628997 0.48128581687337751438 0.087213995918408324104 0.049466571888288901615 -0.014952670829082859161 -0.54621556196783149773 -0.0084841181529071128808 0.33926795788408370402 0.010937297490537706279 0.39842578800228789504 0.11310980809357357169 -0.0075845318605496092612 0.48692581970017750903 -0.29667246367777500016 -0.31590806591086312283 0.47381101331823166634 -0.097258391969633678498 0.20722719402531475374 0.077808107726665257098;0.3535993360831548582 0.042716809486494131121 0.35726597601851872721 0.38850028086044796627 -0.047446088708185271687 -0.31403276244041389287 0.22574047242592137907 0.4334120665518218507 0.26974673294288520342 -0.069214786779229431346 0.087346594060286067429 0.28146720470147224002 -0.043488846722495463903 0.063484951450821780483 -0.19214895797333339522 0.41149437856721327034 -0.029321505443357855081 -0.13454939784072775244 0.20105754232712824692 -0.069303636846408098182 0.19281846274056221868 0.34917751660194989993 -0.080602542080098579791 0.10222504988493683054 -0.24671465646946563743 0.19712365744889018271 -0.23324398208353389061;0.20525610303953953362 -0.40935286821198302309 0.15299707044492927288 0.40687354308457512886 -0.43091044228708264008 0.072547464609415121539 0.18552662972722711032 0.048383448037152991528 -0.42282518374400374084 0.173707583798703602 -0.35240246529455038216 0.28100441908151913006 0.056307142887724759284 -0.17317830186313451502 -0.3245141453148941979 -0.073371736928834030422 0.0058612011447989401103 0.15159510955282287648 -0.23853387234008105455 -0.17392664771038962579 0.22158966333168611529 -0.041329189541588838563 -0.06051903563263314606 -0.091106627040165144571 -0.16693204941103606531 0.37376196231104691359 0.22113058651267006316;-0.092623080598974852351 -0.014819882604304376872 0.14853172674782255669 0.08336002764421528155 0.61979280303362915827 0.34483884572648421107 0.086969004871765967501 -0.59655628661818327352 -0.35828397670460204738 -0.019883486061155933311 -0.10811702770990772038 0.024278411804257736539 0.047006480980652944057 0.024632405935209142345 0.038275739272377679034 0.05909020934782630019 0.0045302347815394106156 0.071857792677999743347 0.038701066668739382559 -0.0635761584951103631 0.036229554119897054709 0.14024817887510207526 -0.32135858884267498592 -0.26967836398592925917 0.10892442074545632957 -0.074311691745493541061 0.41979818416938791126;0.15207881311903670429 0.12584243115486082321 -0.015589943000961462016 -0.26687357084270002527 0.19752650895940812581 0.47929322224417891807 0.30958794690273422345 0.030173275131887868084 0.018034177712063281795 -0.23847870816441371633 0.14090862147938196247 0.1749201630423904974 -0.1559228974845815463 0.13141075841312982453 -0.099635138248849841602 0.39804994361554019155 -0.083998323748601846916 -0.30770521255294158713 0.11725052351117760951 -0.16069233905117552563 -0.016402704693975422856 -0.43013934332065145716 0.26976327519775766817 0.12076523371801502205 0.15101208526146275846 0.25520569908520523983 -0.31481135514027830391;0.17274641470070806193 0.16208236620059313093 -0.19826216700956542094 -0.057043061025280457355 0.093970199261461592743 0.31915484655536940917 0.35343120694932939063 -0.20461576360570365996 -0.1740227931562932373 -0.045722941293183730349 -0.0092707003913088219249 -0.1099849918045236602 -0.095713087875658478532 0.077186449417039851295 0.0032400866082794681222 0.15810009251976989142 0.077096105837514444792 -0.15713861860608052679 -0.01379880906018457476 -0.058889149846101523922 -0.098134424727028102264 -0.026205919867751528013 0.28757019760746571624 0.38006108006201666516 -0.093651181427245946964 -0.41969442868506773303 0.34493853092644555236;0.027814099828095500272 -0.073453635160508595758 -0.29243430892818145228 0.15024503733521016313 -0.30075200439806859531 0.040299458445834338005 0.51931670199893731343 -0.4116228312149018409 0.064175979972364294301 0.23975001986691327205 -0.11280694259115128797 0.18605959993462364843 -0.52379962795897849759 -0.25979377845527595881 -0.63097327372774947296 0.13294684746147933385 -0.10000334006147160171 -0.11088415081311060739 -0.42210510837846360044 -0.17708980581047484293 0.28534158055059488657 0.12111814779695208311 -0.019499742055635052584 -0.32110793442819052235 -0.0155601629074961674 -0.41674977034327792547 -0.24313196685212828951;0.12841696650339803898 0.09998720562292220948 -0.19657501196189605674 0.20610335713217078912 -0.042844054708356976713 0.18796704645157144564 -0.15680333604193313901 0.24215557472440543685 -0.33212800451325225071 -0.14883756518478502562 0.079149299876426867928 -0.38923427948291866585 0.13284041866837387191 -0.26116543430952010585 -0.038352418117915870743 -0.38004553088567283314 -0.029091125480085550103 0.18699545466003900107 -0.20809735450851199468 -0.18296255325595306429 0.43961982654888015487 0.46044423848941773425 -0.23290381984512989466 0.35991936127379958732 -0.33886658202579067467 -0.042377886205989867552 -0.068951053314637245073;0.54034238624241637261 0.0093209340149025612932 -0.049593706478615849631 0.18830059015751218765 0.25379192793097909986 0.07747539268462153017 0.19178840551736564546 -0.13494598989396891509 -0.22194210491758131765 -0.16026192869415867293 -0.23808929612988455338 0.29676009500534605845 -0.17738224323610859989 -0.13972469791849195797 -0.29645127426602047027 0.13161991148233201376 -0.11271390879916201588 -0.10257645376080812283 0.13840372949569912375 -0.36108260004637937612 -0.097516720010823579323 0.17378249628407366201 -0.27299797194412250834 0.33250340134806577463 -0.4416157665523905429 -0.033609763609276796514 0.56374319420008045523;0.10208522288106050557 -0.32528504105042577166 0.034762311979060676881 -0.23166129280724148676 0.29287521065026550504 -0.12117640111082217391 0.04652358200192267812 0.27013892502554937014 0.1635741369736531392 -0.065943704943574460442 0.12207609808880239 0.13663897043646472396 0.061283804318220683194 -0.17483024756626758256 -0.12217107905526031209 -0.40081350040644769805 0.27096186496468460669 0.12142012206059321633 -0.11831219057349930124 -0.43181550351530317844 0.14102794372334709339 0.45790771726393209029 0.16082089647561065293 -0.15674933736029056375 0.15306441958371719281 0.98939645150773447568 -0.10450068223860070615;-0.0047049412434119718129 0.038975908673196973941 0.055297974387785886474 -0.19922414314076034025 0.073568558574981540721 -0.03943948646780388867 -0.30587000959813709366 -0.057122944527188183883 -0.01787747105138874637 0.40157116352315613828 -0.16166683072271975652 -0.060552330674153220791 0.21203711458205870555 0.29135586243497563208 0.26349528703852387324 -0.13965071932748007733 0.13406050580055242638 0.14385060076737171686 -0.01728516810534051068 -0.054837570364445344107 -0.24021356027534504496 0.1488250203404525851 -0.59905495715982048921 0.31871385808460062083 0.15212616339482973316 -0.52541374982550503869 -0.46284153672261391099;-0.12652704473660217332 -0.29825692191220498639 0.07203236935886968284 -0.25521378672992456327 0.18555349015172054039 -0.26787613325849524148 -0.056405309448226394198 0.0058641494190603410397 0.46527246881176093085 0.22628124455688941596 0.04456915586225178999 0.095387598897298558898 -0.046501304009373821413 0.069398014729656787303 0.065382785305012319776 0.010988868139754470743 -0.003374865850583066984 0.080076486057461121471 -0.13682431013887108584 0.021010912260758522058 0.042274476705665336995 -0.10905874565480279392 -0.40748711906654894177 0.14466588489722037592 0.013192251374953750664 -0.12025714804599238472 0.08510641889885078859;-0.10898464686168905791 -0.08873742752144002377 -0.17944570875852150493 -0.34521649332292725365 0.26917800536247360466 0.048216790955429605914 0.19219532499613473098 -0.4606161888957356898 0.14453694266663441592 0.32461204873013183025 -0.0019092762520016917649 -0.020098723712244512263 -0.31265089258905987002 0.15359241757461666866 0.16196678337624878519 0.15941686062547227865 0.020601697065136190257 0.11000992445617840954 -0.26708845311805362588 0.26528933756604006211 -0.20595664203864169628 -0.27859670465562247355 -0.48598606407958683251 0.09979103956933357833 0.017297811910791646706 0.31755202231312612549 0.47014747002294066114;-0.011141613668389782621 -0.22304316260221263013 0.25304906340466248871 0.087767904046795658379 -0.54289407744464868166 -0.73892232414272862595 0.073563168393965705505 -0.041045270538519973424 0.62836558364845873648 0.15210334180648435454 -0.10532140445511882498 0.27666277163522895455 -0.027659924040705718973 -0.05675370142391596151 -0.22126421353116174084 -0.087088926674069574996 -0.0025894477453612466111 -0.0024697306513867993763 -0.10363354273247016302 -0.0036829379577219267805 -0.02600340746732756822 0.24484710174315124642 -0.10605822653087759733 0.25415421994720333032 0.37294909091691752501 0.083646649861271682447 0.23579978221369593538;0.16499222527772025582 -0.11846443569768083659 0.055644930093849118147 0.12519124340427401076 0.1183831950324459592 -0.39345660255869063793 -0.45549323130645069657 -0.12949353818721975884 0.142359618960180484 0.28172677129533929552 0.07014584565826306739 -0.12838052302665309279 0.089591853976769289525 -0.14694029728029342485 -0.026500159815939547392 -0.06177339207627154799 0.21124279140296722823 0.23190867103855816733 -0.046346594138774191429 0.15582922681902267037 0.016458154621682145879 -0.037350956438441836049 0.16216397088086273448 -0.048937314692069043554 0.16543904793284491817 -0.34634589649116187537 0.35153408939871122474];

% Layer 2
b2 = [0.31428681701661420611;-0.21325178610219408526;0.12776042763365658139;0.49813997416611310864;0.31975363616599100647];
LW2_1 = [0.21699500086681713928 0.11254704879997685929 -0.7120169531929892992 0.20889819449613208913 -0.14907900639115595487 -0.45432664386808752077 0.20290784919728049873 0.12959275260149832887 0.18221155800919205947 -0.10658588508382985105 0.26171348667128757626 -0.071985847745553957489 0.34333236236693742693 0.15685232865961565296 -0.64822705223519738738;0.79552904858149897649 0.52867326132309844233 0.39013724076621847381 -0.69454517277073191117 0.11447164103039063343 0.2397028031875587939 -0.26101467861568067308 0.29063537269335204538 0.26619930183404538759 -0.15731406972133527011 0.063922625441682201508 0.12210996897491968594 0.074046468226643666344 0.63847700362229276028 -0.38815342998521107365;-0.85524042828662982796 -0.50337628479453500052 -0.33627541020090073731 0.61337599616958882187 -0.15259092705135399171 -0.19409473781454200658 0.26968146036884438344 -0.32393202475678506413 -0.27536141131826186168 0.17573612513199021734 -0.099331078965848487727 -0.064893776784440623806 -0.12998306731957051663 -0.71281183938016678958 0.43432085272765769135;-0.054395492813847881597 0.3665732796964072393 0.62065234074192143776 -0.068750849138586228593 0.33917849764646462729 -0.31154352540696944596 -0.24075448726314960246 0.23838216244100349228 -0.052711167378447221221 0.19246184910529823275 -0.12390905651340608506 -0.86594351020268989227 0.67458869539765853318 0.39103147667151177957 -0.74617341610357579285;-0.30140315531486155942 -0.74480199541610070391 -0.037462674427326800308 0.69435722975392144551 -0.1506462306111661098 0.62819239395534620662 -0.28606641224970064119 0.018540971136662712238 0.12860610842841757595 -0.03657735467958329878 -0.59326302466005798042 0.27558513682307844705 0.083633056203253536287 0.58912067310381766028 0.32057930571855042245];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [40;3.44827586206897;3.50877192982456;6.45161290322581;8.33333333333334];
y1_step1.xoffset = [0.44;0.21;0.27;0.38;0.34];

% ===== SIMULATION ========


out = "/****** NN DATA ********/" + newline;
out = out + "const int NNil = " + length(x1_step1.xoffset) + ";" + newline;
out = out + "const int NNol = " + length(y1_step1.xoffset) + ";" + newline;
out = out + "const int NNl1l = " + length(IW1_1(:, 1)) + ";" + newline;
out = out + "float NNinput[" + length(x1_step1.xoffset) + "];" + newline;
out = out + "float NNoutput[" + length(y1_step1.xoffset) + "];" + newline;

out = out + "float x1_step1_xoffset[" + length(x1_step1.xoffset) + "] = {";
first = true;
for i=1:length(x1_step1.xoffset)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",x1_step1.xoffset(i));
end
out = out + "};" + newline;

out = out + "float x1_step1_gain[" + length(x1_step1.gain) + "] = {";
first = true;
for i=1:length(x1_step1.gain)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",x1_step1.gain(i));
end
out = out + "};" + newline;

out = out + "float x1_step1_ymin = " + x1_step1.ymin + ";" + newline;

out = out + "float b1[" + length(b1) + "] = {";
first = true;
for i=1:length(b1)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",b1(i));
end
out = out + "};" + newline;

out = out + "float IW1_1[" + length(IW1_1(:, 1)) + "][" + length(x1_step1.gain) + "] = {";
first = true;

for i=1:length(IW1_1(:, 1))
    if first
        first = false;
    else
        out = out + ",";
    end
    firstx = true;
    out = out + "{";
    for k=1:length(IW1_1(1, :))
        if firstx
            firstx = false;
        else
            out = out + ",";
        end
        out = out + sprintf("%.8f",IW1_1(i, k));
    end
    out = out + "}";
end
out = out + "};" + newline;

out = out + "float b2[" + length(b2) + "] = {";
first = true;
for i=1:length(b2)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",b2(i));
end
out = out + "};" + newline;

out = out + "float LW2_1[" + length(y1_step1.gain) + "][" + length(b1) + "] = {";
first = true;
for i=1:length(LW2_1(:, 1))
    if first
        first = false;
    else
        out = out + ",";
    end
    firstx = true;
    out = out + "{";
    for k=1:length(LW2_1(1, :))
        if firstx
            firstx = false;
        else
            out = out + ",";
        end
        out = out + sprintf("%.8f",LW2_1(i, k));
    end
    out = out + "}";
end
out = out + "};" + newline;

out = out + "float y1_step1_ymin = " + y1_step1.ymin + ";" + newline;

out = out + "float y1_step1_gain[" + length(y1_step1.gain) + "] = {";
first = true;
for i=1:length(y1_step1.gain)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",y1_step1.gain(i));
end
out = out + "};" + newline;

out = out + "float y1_step1_xoffset[" + length(y1_step1.xoffset) + "] = {";
first = true;
for i=1:length(y1_step1.xoffset)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",y1_step1.xoffset(i));
end
out = out + "};" + newline;

out = out + "/****** END OF NN DATA ******/";

disp(out);

fid = fopen('nn.h','wt');
fprintf(fid, out);
fclose(fid);
% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';

xp1 = mapminmax_apply(x1,x1_step1);



% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);
disp(a1)
% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);

end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);

x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
