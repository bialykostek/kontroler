function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 08-Nov-2022 13:04:05.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx21 matrix, input #1
% and returns:
%   y = Qx5 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.277611111111111;0.43325;0.277611111111111;0.43325;0.32544;0.2295;0.0525;0.168957718368858;0.189140903587907;0.422014077884971;0.370577538712667;0.370577538712667;0.370577538712667;0.370577538712667;0.370577538712667;0.01;0.0166666666666667;-0.183333333333333;-0.0666666666666667;0.3;0.161111111111111];
x1_step1.gain = [4.63290650537289;11.0871573760394;4.63290650537289;11.0871573760394;5.41477149664284;7.43494423791821;5.25624178712221;2.79252680319093;3.38425625838323;17.4532925199433;7.7417966752017;7.7417966752017;7.7417966752017;7.7417966752017;7.7417966752017;4.77167533521019;3;1.3953488372093;1.41176470588235;3.07692307692308;6.20689655172414];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.9274450276629118139;0.22817045460326651485;0.59825853876598800163;0.23548034614863239122;-0.024612407406981437474;0.020768594571174695679;0.11780112352480562321;0.034369257217842862084;1.0235992458393581295;1.3964242517935723242];
IW1_1 = [1.922816178108558427 -0.16923241031259000922 -0.61792549163892418473 0.014632231660857315803 0.43318335877972768966 0.48606129327493058367 -0.25930098213692664988 -0.60739553833542914152 -0.42692268597608890035 -0.37550105395573207812 -0.37329344161950001046 0.017050203346077513755 -0.086235856420399742417 0.30798128344588826533 -0.045323755403492677063 -0.16593522218525458278 0.91259126970038384474 0.33168390855001372852 -0.38256431462818674127 0.16892545314006787716 -0.23301545085019070846;-0.57318530477961160408 -0.046445464034365863126 0.32698278728669660786 0.056353117878166596177 -0.054857867623674366753 0.011126113107665298527 0.10696894054668304452 0.10671169794907026107 0.21983872928214207021 0.29815222057156648416 -0.15558560666570178666 0.16066508035297863421 0.02235375716435340776 0.19128305586110205816 -0.0047707485213046053885 0.072457759318180423036 0.35462698746000004268 0.035690039608185362974 0.18663631702019811698 -0.18051838938109709964 0.21272047837410504312;-0.72894175633324709285 -0.3061989029996273759 0.3047567311023327008 0.32395266386568560835 -0.11360898711593236943 -0.00051262711895864315759 0.15015269437361589144 0.088569432613791132525 0.24959025358405526052 0.46902577760445351984 -0.25894729227396012794 0.35408913815010878423 0.012593199666375010093 0.28815564505563834308 -0.14538599097491994305 0.10007637297572978541 -0.90989192451252109972 -0.39088160782988867759 0.087331790927929892066 -0.077246103525533169054 -0.13233205907019340852;-0.22500853383308083711 0.31459979444236463308 0.12232112362285002538 -0.30999037389284556099 0.063728150871508043585 -0.033027024480148735319 0.0063557002919616386108 0.01263805837483355371 0.0529386576279843174 0.20270522497967854991 -0.16323878369777733432 0.10085887008109804819 -0.10276521111930819741 0.1023181788335167236 0.086251419446527824442 -0.022212116819124647082 -0.16872767633275190247 -0.026679563470194265357 0.20990090793095442234 0.47926665409805413454 0.1685295513817059998;1.1566977946489735984 0.14925434374412377414 -0.97739151012953062736 -0.14076706805033142866 0.25571030339664752029 -0.094771730438073520375 -0.13169059128276683346 -0.23818073446822535244 -0.29552235991551528693 -0.029030651672953967923 -0.1826066593352381473 0.0093790121332144767152 -0.29831854893166676046 -0.028631850759501059622 0.20891320946893907062 -0.19380053310329206639 -0.27488763623598733155 0.25133530203228227062 -0.026334021139427295222 0.026478554547767131633 0.2505492795247533655;0.035480846915384008089 0.31694879255395619344 0.39655136279390240661 -0.26820552379348239214 0.6075182851550644525 -0.016136591941312554421 -0.18937554534754297286 -0.35131139517155529628 -0.37722202040237667875 0.15002822173361299307 -0.54026167597662377862 -0.1101460972204093558 -0.55644404780951350897 0.075409168067328460894 0.86411043066531456613 -0.42211683317196241338 -0.45569758683496480733 -0.17969594430167309951 -0.065392167780680118816 -0.51103573228882148705 0.042708124725385335219;-0.058339861209141599674 -0.22309100728892397592 0.59851226055176931506 0.070257975500467848007 0.4547903260257423752 -0.22727999692686184918 -0.41584975523159461996 -0.42294927624781686326 -0.74588168951037359111 -0.49414635343206447793 0.17807626921832780953 -0.11279674051507547483 -0.44468372721873028475 -0.41902040447223726227 -0.01661201737524765909 -0.4112341908665600454 0.65611435465145717671 -0.90290529850478384866 0.22512788952902487716 0.21861109821399288267 0.042327007417475075168;0.74832297247209589308 0.4113128385710514423 -0.88652169143843939647 -0.40588038493229883219 0.22686592433432378746 -0.12616035181175278002 0.00020635920705491805904 -0.17763102809104044932 -0.056360590749571809477 0.4046557971863821157 -0.49520794413838931103 0.23415445787013028367 -0.39995872104737201225 0.23413405094285033581 0.31961318500046315139 -0.078905865751911136163 0.21204297377053699103 0.40851422851068008857 0.33414939160858475597 0.13810542494086075482 -0.45975567010815260316;0.16469015743756723613 0.4551551044029956139 -0.31919592973125399116 0.059080717702706828098 0.0120559370505086208 0.2490090831918829184 0.03567698916048649832 -0.14564673421600993208 -0.094728919748396200884 0.094823080304117693395 -0.093968423750407620298 -0.015723405205664831713 0.34208091249407879264 0.16402796122525903355 0.13251600888215592233 -0.30152680422427058371 0.23430877566584931704 -0.029756063375811957206 -0.25243741125759178168 0.026092354248333123057 0.049614473466177158589;0.40533667685585506035 0.017669085668856859828 -0.12245598080487883619 -0.42463642756185532301 0.19372457360377720592 -0.015410324593551218142 -0.0011276540121804567995 0.52103422878424054954 0.42546683747093805295 0.49696346387658696386 0.59874677785018459719 0.10840549471653407321 0.3374878047251980151 0.027622856564457669293 -0.60852088007921345536 -0.40438742048309483934 -1.2004263016958716115 0.41925290783304569597 0.13540920174957055133 -0.28041024488340576815 -0.088473100169603496878];

% Layer 2
b2 = [-0.23744715317606382432;-0.45490632030764915905;0.4286222890491910853;-0.47073454078877430273;0.04340667563194960249];
LW2_1 = [0.33068507606444735858 0.71484359900381355679 -0.55871217251895888278 -0.11554452024219781514 -0.19225959275943829696 -0.15906686607228281982 0.15741775715845468531 0.30758071920501167673 0.14967637243670628422 -0.063553578200028715273;0.72557880223729120939 -0.18536206487754469663 -0.42650339574236950657 -0.30770762702220377793 0.94641127369956912219 -0.33599037052837626982 -0.39755183395917048639 0.33806343541504424444 -0.046761201310008167209 0.24860324559722848936;-0.72781589377521638262 0.18095982927677628505 0.42897171255519284117 0.3108173783117917921 -0.95815560554709344743 0.33585473550785521768 0.40354571050328580384 -0.34202580882136279783 0.060789027735930888097 -0.24186472466255973246;0.47502199134672423719 -0.74410504824495438125 -0.44334282302514194107 1.6044736138911463996 -0.26752289793455608091 -0.21728678209711496661 -0.074820378523293373796 0.15557270039253931482 0.11592056971901916473 -0.034819373056298896785;0.041746760599210785969 1.2383412937193167824 -0.17514514485364246488 0.5502964536823811148 1.0679911666448016483 -0.038925302126761381072 -0.049866723050478192758 -0.95567835092767128291 -0.22042205951885479598 -0.20931237456089141213];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [3;1.3953488372093;1.41176470588235;3.07692307692308;6.20689655172414];
y1_step1.xoffset = [0.0166666666666667;-0.183333333333333;-0.0666666666666667;0.3;0.161111111111111];

% ===== SIMULATION ========
out = "/****** NN DATA ********/" + newline;
out = out + "const int NNil = " + length(x1_step1.xoffset) + ";" + newline;
out = out + "const int NNol = " + length(y1_step1.xoffset) + ";" + newline;
out = out + "const int NNl1l = " + length(IW1_1(:, 1)) + ";" + newline;
out = out + "float NNinput[" + length(x1_step1.xoffset) + "];" + newline;
out = out + "float NNoutput[" + length(y1_step1.xoffset) + "];" + newline;

out = out + "float x1_step1_xoffset[" + length(x1_step1.xoffset) + "] = {";
first = true;
for i=1:length(x1_step1.xoffset)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",x1_step1.xoffset(i));
end
out = out + "};" + newline;

out = out + "float x1_step1_gain[" + length(x1_step1.gain) + "] = {";
first = true;
for i=1:length(x1_step1.gain)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",x1_step1.gain(i));
end
out = out + "};" + newline;

out = out + "float x1_step1_ymin = " + x1_step1.ymin + ";" + newline;

out = out + "float b1[" + length(b1) + "] = {";
first = true;
for i=1:length(b1)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",b1(i));
end
out = out + "};" + newline;

out = out + "float IW1_1[" + length(IW1_1(:, 1)) + "][" + length(x1_step1.gain) + "] = {";
first = true;

for i=1:length(IW1_1(:, 1))
    if first
        first = false;
    else
        out = out + ",";
    end
    firstx = true;
    out = out + "{";
    for k=1:length(IW1_1(1, :))
        if firstx
            firstx = false;
        else
            out = out + ",";
        end
        out = out + sprintf("%.8f",IW1_1(i, k));
    end
    out = out + "}";
end
out = out + "};" + newline;

out = out + "float b2[" + length(b2) + "] = {";
first = true;
for i=1:length(b2)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",b2(i));
end
out = out + "};" + newline;

out = out + "float LW2_1[" + length(y1_step1.gain) + "][" + length(b1) + "] = {";
first = true;
for i=1:length(LW2_1(:, 1))
    if first
        first = false;
    else
        out = out + ",";
    end
    firstx = true;
    out = out + "{";
    for k=1:length(LW2_1(1, :))
        if firstx
            firstx = false;
        else
            out = out + ",";
        end
        out = out + sprintf("%.8f",LW2_1(i, k));
    end
    out = out + "}";
end
out = out + "};" + newline;

out = out + "float y1_step1_ymin = " + y1_step1.ymin + ";" + newline;

out = out + "float y1_step1_gain[" + length(y1_step1.gain) + "] = {";
first = true;
for i=1:length(y1_step1.gain)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",y1_step1.gain(i));
end
out = out + "};" + newline;

out = out + "float y1_step1_xoffset[" + length(y1_step1.xoffset) + "] = {";
first = true;
for i=1:length(y1_step1.xoffset)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",y1_step1.xoffset(i));
end
out = out + "};" + newline;

out = out + "/****** END OF NN DATA ******/";

disp(out);

fid = fopen('nn.h','wt');
fprintf(fid, out);
fclose(fid);

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
