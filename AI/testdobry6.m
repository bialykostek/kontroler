function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 15-Nov-2022 14:46:04.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx21 matrix, input #1
% and returns:
%   y = Qx5 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.245138888888889;0.369888888888889;0.245138888888889;0.369888888888889;0.32544;0.0045;0.0435;0.0018450281223676;0.0029296201703893;0.396549286990268;0.370577538712667;0.370577538712667;0.370577538712667;0.370577538712667;0.370577538712667;0.00282;0;-0.35;-0.333333333333333;0.216666666666667;0.161111111111111];
x1_step1.gain = [3.99866711096301;8.20512820512821;3.99866711096301;8.20512820512821;4.51467268623025;3.93507132316773;4.24628450106157;2.00420583961071;2.02579320011846;13.6590984938687;7.7417966752017;7.7417966752017;7.7417966752017;7.7417966752017;7.7417966752017;0.730561582688613;2.92682926829268;1.08108108108108;1.08108108108108;2.72727272727273;4];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.5565012587407767164;-0.41575868734202353627;0.015227829068195532572;-0.76191306023863081265;0.55183299016210418664;-0.0077402002415435152555;-0.39677356196803087451;0.088899399240655069265;2.4996320693286167014;1.207417587026809791];
IW1_1 = [-0.13850107085458207568 0.18064023352113936505 -0.66203540371439262291 0.22913814233278781418 -0.85643493087684596787 -0.45585472176004343536 0.73238391858676143986 0.18332262962088696767 -0.49349236146097086309 -0.0071267223882019205272 -0.68118649483167215131 -0.13242604167218130495 1.2550700832163859122 0.9106842645547357229 0.21879970047681931988 0.53136046256935731691 0.32254501821511699644 -0.68152565807497877959 0.37536776787055836646 0.24193701501826764266 -0.046231274649644035768;0.41905766070134314871 -0.60950472595254168162 -0.49215086060739948737 0.48976763764968817005 -0.14369788868203209331 0.046089796774075084129 0.052203454789575498562 0.077560161968975860347 0.088893426997559560343 0.018556221423528859032 0.0034971675001792190338 0.0048867259384634334496 0.037874619646554488761 0.059128679991647829783 0.079944795769107457328 -0.25821086893276246066 -0.42509517153386539023 0.12081282630639704478 -0.26159957441406045398 -0.56812594367044444432 -0.12530039978663318201;0.57539123656761137493 -0.18645140079956656898 -1.0054217776308327359 0.29789489797633916801 0.065081860203944047472 -0.05360875474116548467 0.043527923104272829569 -0.57787404549134380183 -0.73204141532735567122 0.094954319299155640066 -0.4956920659036325727 0.11295983692092209649 -0.46597061496214081666 -0.14963730787377221843 -0.31113736375470613105 -0.085707288924857349954 0.28249455950401319848 0.44319529659962747514 0.11086791469194313964 0.21672672054851413459 -0.10039616802236075999;-0.13864963251257866883 0.17790292527372703058 -0.069187195859139918874 -0.2577723719650907297 -0.035637773104981770866 -0.02720289296220409353 0.13210580392659587723 0.15113586821738173027 0.21873742865901041332 -0.078378632723955066197 0.34040568702795337419 -0.070590309802353451429 0.10236547444719466815 -0.19821403721562813605 0.063289830848544045838 -0.064204173879937820324 -0.11056197451017121813 0.18392739211525205301 -0.5964335791787779284 -0.08590953424366754021 0.0055164939947986383478;-0.49221053209830800679 0.60218461836271997001 0.68075570826806697244 -0.32974905643321411608 0.32835839916007741879 -0.13056377675666899774 -0.027275131741140920538 -0.16232137404091390165 -0.15791868849007664743 -0.075157235763880683721 0.083696927891585309878 -0.041283318016867173728 -0.048887035932788439063 -0.19061152547487936193 -0.1895977276144317214 0.70631283916365350528 -0.42504944853826298612 -0.44937436713226719398 0.074577853405990643387 0.10139777007439737533 -0.29873741410064147406;-0.062050476469708966409 -0.026983908897022203938 0.072996900886530852182 0.04075932821200838746 0.013229904953418502797 -0.0065264604554159198063 -0.0011461700711193041971 -0.0090350531679595259826 -0.0091976017698784488796 -0.001467187704608098435 0.0022425721230524848365 -0.0013062349137165545424 -0.0029253981959671947893 -0.0075675992880053499778 -0.0093965317633230745209 0.033577748694379086492 -0.1238298135413798684 -0.047253856752970807564 -0.014936940008478057779 -0.045836311424232889511 0.33812751065756541102;-0.47631372794212267774 -0.17662575832905777484 0.18417483188031541497 -0.047692139389690177409 -0.19937355426581551687 0.070232006062918905798 0.12326144176409208064 0.18797216657007070895 0.21758447622052010106 -0.012016687567645886747 0.13204045344143172658 -0.0025903234813614613857 0.047496739076653943235 -0.026059244791949570663 0.1054827752800704399 -0.48789343068577506468 0.017335385928931405786 0.015667541918553844205 -0.20326834163920376453 -0.18247941211492918478 0.26131219923170678765;0.031758190603210584291 -0.27634641888381938912 -0.010857249737501968589 0.28792103664550516839 -0.0033332037923470263924 -0.0030964673969340965852 -0.0021818347646118587541 -0.023717742031690018656 -0.030223491021184427374 0.010765011296040861641 -0.030042535381536863287 0.0048971371099369442881 -0.0078065205183293264607 0.015522249578823034757 -0.0094181274812248222394 0.026215942528072737339 0.5412904336185969667 0.054576982678159136064 0.064096019513161794912 -0.34583098665524941717 -0.058709489603172716754;0.96388898769150843648 -0.063409092019249047034 0.11081711399765831194 -0.069731400296863282895 0.30477220324405673857 0.20032798249213779052 -0.29498790065454627563 -0.016565798261492681309 -0.032352369146531431698 -0.060690246035531143776 -1.0626909578435259629 0.39209053079116518159 -0.53974766398876261597 0.88798551025380856316 -0.16153223496252128166 0.21781125419439822943 0.057593365825039932737 -0.59195779300951534285 1.1541932905181080393 -0.02531687218152364402 0.099206213333599649329;2.5259211098475966573 0.80784222840455410797 -2.4848005806999737821 -0.97340569007151045433 0.028110687678836079884 0.040680629224339542871 0.12593945713904711181 0.15849512985871425097 0.25734086470984163242 -0.1572428573695353049 0.19941211827347227192 -0.11100895647757515194 0.13804853663165742028 -0.060640197641629284275 0.091995418017974575631 -0.21105804468221278647 -0.11308813598137625045 -0.27300899993631283502 -1.0443531030144956873 0.13462502670876974609 -0.047067704016413407231];

% Layer 2
b2 = [-0.4314119586322027744;-1.2563848800369821213;1.2612103915611607707;-0.26717717592995826603;-0.17692938261020807467];
LW2_1 = [-0.0045450793296911463914 -0.75016189608653316423 -0.0094550071228747534224 0.21271313547202339023 -0.25792458955840713575 -0.32949110439341094958 0.037284305942842800585 1.1156192500419299662 0.11105775168486217708 0.23846355103653454899;-0.071663382308215214933 0.34690209297179847026 0.24142196145348887582 1.20629636988842881 -0.86877468090258647138 0.69291788417787947285 -1.6407405595730031322 -0.0089661190402991960968 0.67971848074305418752 1.5137272670275161435;0.071782926987614834036 -0.34862967083309392979 -0.24150506717491984632 -1.2099773174820351862 0.86885354813594362078 -0.69327574205102826532 1.6412456148230283315 0.0089476878255743408364 -0.69028345556982462217 -1.5084535693200762374;-0.012437940797166079435 -0.94511612459240479378 0.025464829466444915268 0.10574538239795985839 -0.46830989396809619141 -0.67673960477242089961 -0.32531274371551854863 -1.2071988210122002183 -0.14452893171063130318 0.35230887221950291099;0.0022621971637587024243 -0.36147197099478300952 0.0046138057024726307487 0.1118866926254922789 -0.26855569673094847882 2.6706120416793814876 -0.006145617076353582231 0.14332564358542504435 0.075267377999739218386 0.2014858115206423772];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [2.92682926829268;1.08108108108108;1.08108108108108;2.72727272727273;4];
y1_step1.xoffset = [0;-0.35;-0.333333333333333;0.216666666666667;0.161111111111111];

% ===== SIMULATION ========
out = "/****** NN DATA ********/" + newline;
out = out + "const int NNil = " + length(x1_step1.xoffset) + ";" + newline;
out = out + "const int NNol = " + length(y1_step1.xoffset) + ";" + newline;
out = out + "const int NNl1l = " + length(IW1_1(:, 1)) + ";" + newline;
out = out + "float NNinput[" + length(x1_step1.xoffset) + "];" + newline;
out = out + "float NNoutput[" + length(y1_step1.xoffset) + "];" + newline;

out = out + "float x1_step1_xoffset[" + length(x1_step1.xoffset) + "] = {";
first = true;
for i=1:length(x1_step1.xoffset)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",x1_step1.xoffset(i));
end
out = out + "};" + newline;

out = out + "float x1_step1_gain[" + length(x1_step1.gain) + "] = {";
first = true;
for i=1:length(x1_step1.gain)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",x1_step1.gain(i));
end
out = out + "};" + newline;

out = out + "float x1_step1_ymin = " + x1_step1.ymin + ";" + newline;

out = out + "float b1[" + length(b1) + "] = {";
first = true;
for i=1:length(b1)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",b1(i));
end
out = out + "};" + newline;

out = out + "float IW1_1[" + length(IW1_1(:, 1)) + "][" + length(x1_step1.gain) + "] = {";
first = true;

for i=1:length(IW1_1(:, 1))
    if first
        first = false;
    else
        out = out + ",";
    end
    firstx = true;
    out = out + "{";
    for k=1:length(IW1_1(1, :))
        if firstx
            firstx = false;
        else
            out = out + ",";
        end
        out = out + sprintf("%.8f",IW1_1(i, k));
    end
    out = out + "}";
end
out = out + "};" + newline;

out = out + "float b2[" + length(b2) + "] = {";
first = true;
for i=1:length(b2)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",b2(i));
end
out = out + "};" + newline;

out = out + "float LW2_1[" + length(y1_step1.gain) + "][" + length(b1) + "] = {";
first = true;
for i=1:length(LW2_1(:, 1))
    if first
        first = false;
    else
        out = out + ",";
    end
    firstx = true;
    out = out + "{";
    for k=1:length(LW2_1(1, :))
        if firstx
            firstx = false;
        else
            out = out + ",";
        end
        out = out + sprintf("%.8f",LW2_1(i, k));
    end
    out = out + "}";
end
out = out + "};" + newline;

out = out + "float y1_step1_ymin = " + y1_step1.ymin + ";" + newline;

out = out + "float y1_step1_gain[" + length(y1_step1.gain) + "] = {";
first = true;
for i=1:length(y1_step1.gain)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",y1_step1.gain(i));
end
out = out + "};" + newline;

out = out + "float y1_step1_xoffset[" + length(y1_step1.xoffset) + "] = {";
first = true;
for i=1:length(y1_step1.xoffset)
    if first
        first = false;
    else
        out = out + ",";
    end
    out = out + sprintf("%.8f",y1_step1.xoffset(i));
end
out = out + "};" + newline;

out = out + "/****** END OF NN DATA ******/";

disp(out);

fid = fopen('nn.h','wt');
fprintf(fid, out);
fclose(fid);

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
